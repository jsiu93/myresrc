/*
 * This file is generated by jOOQ.
 */
package com.xzh.myresrc.base.db.tables;


import com.xzh.myresrc.base.db.Indexes;
import com.xzh.myresrc.base.db.Keys;
import com.xzh.myresrc.base.db.MyresrcBase;
import com.xzh.myresrc.base.db.tables.records.SysDictRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 数据字典表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysDict extends TableImpl<SysDictRecord> {

    private static final long serialVersionUID = 1695763181;

    /**
     * The reference instance of <code>myresrc_base.sys_dict</code>
     */
    public static final SysDict SYS_DICT = new SysDict();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysDictRecord> getRecordType() {
        return SysDictRecord.class;
    }

    /**
     * The column <code>myresrc_base.sys_dict.id</code>.
     */
    public final TableField<SysDictRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>myresrc_base.sys_dict.name</code>. 字典名称
     */
    public final TableField<SysDictRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "字典名称");

    /**
     * The column <code>myresrc_base.sys_dict.type</code>. 字典类型
     */
    public final TableField<SysDictRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "字典类型");

    /**
     * The column <code>myresrc_base.sys_dict.code</code>. 字典码
     */
    public final TableField<SysDictRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "字典码");

    /**
     * The column <code>myresrc_base.sys_dict.value</code>. 字典值
     */
    public final TableField<SysDictRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false), this, "字典值");

    /**
     * The column <code>myresrc_base.sys_dict.order_num</code>. 排序
     */
    public final TableField<SysDictRecord, Integer> ORDER_NUM = createField("order_num", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "排序");

    /**
     * The column <code>myresrc_base.sys_dict.remark</code>. 备注
     */
    public final TableField<SysDictRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR(255), this, "备注");

    /**
     * The column <code>myresrc_base.sys_dict.del_flag</code>. 删除标记  -1：已删除  0：正常
     */
    public final TableField<SysDictRecord, Integer> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "删除标记  -1：已删除  0：正常");

    /**
     * Create a <code>myresrc_base.sys_dict</code> table reference
     */
    public SysDict() {
        this(DSL.name("sys_dict"), null);
    }

    /**
     * Create an aliased <code>myresrc_base.sys_dict</code> table reference
     */
    public SysDict(String alias) {
        this(DSL.name(alias), SYS_DICT);
    }

    /**
     * Create an aliased <code>myresrc_base.sys_dict</code> table reference
     */
    public SysDict(Name alias) {
        this(alias, SYS_DICT);
    }

    private SysDict(Name alias, Table<SysDictRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysDict(Name alias, Table<SysDictRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("数据字典表"));
    }

    public <O extends Record> SysDict(Table<O> child, ForeignKey<O, SysDictRecord> key) {
        super(child, key, SYS_DICT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MyresrcBase.MYRESRC_BASE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYS_DICT_PRIMARY, Indexes.SYS_DICT_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SysDictRecord, Long> getIdentity() {
        return Keys.IDENTITY_SYS_DICT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SysDictRecord> getPrimaryKey() {
        return Keys.KEY_SYS_DICT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SysDictRecord>> getKeys() {
        return Arrays.<UniqueKey<SysDictRecord>>asList(Keys.KEY_SYS_DICT_PRIMARY, Keys.KEY_SYS_DICT_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysDict as(String alias) {
        return new SysDict(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysDict as(Name alias) {
        return new SysDict(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysDict rename(String name) {
        return new SysDict(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysDict rename(Name name) {
        return new SysDict(name, null);
    }
}
